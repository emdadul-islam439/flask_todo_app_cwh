## Enable Virutal Environment
    -> go to 'project's' root folder
        * "cd 01_flask_to_do_cwh"
    -> install vicrutal Environment
        * "pip install virtualenv"
    -> create virtual Environment
        * "python3 -m venv virtualEnv"
    -> activate virtual Environment
        * "source virtualEnv/bin/activate"

## add .gitignore file
    -> add different files/folder
        * __pycache__
        * virtualEnv
        * .DS_Store

## Create requirements.txt file
    -> if install any module/library using 'pip install', insert it's name
        * sqlalchemy
        * flask





------------------------------------ tasks/steps --------------------------------------

## install flask 
    - add 'flask' in requirements.txt and save
    - write 'pip install -r requiremnts.txt' command, press enter
    - that's it!


## work with first 'minimal app'
    -> create a file named-> "app.py" in the root directory
    -> write code
        * from flask import Flask
        * app = Flask(__name__)
        * @app.route("/")
        * def hello_world():
        *   return "hello world"
    -> run app
        * if __name__ = "__main__":
        *   app.run(debug=True)
        - in the terminal write-> "python ./app.py"
        - open app into browser
            * 'press CTRL' and 'click' in the "127.0.0.1:5000" link
        - to change the 'port no.', change the line:
            * app.run(debug=True, port = 800)
            - press CTRL+C and agin run the app
            - app will run in the "127.0.0.1:8000" link

## adding second route:
    -> just add "@app.route(...)" 
        * "@app.route("/second-route")"
    -> and create function "def second_route():...."
        * def second_route():
        *   return "second page"
    -> 'save' and go to "127.0.0.1:8000/second-route", That's it!

## adding 'static' files
    -> create a folder 'static' in the project's root directory
    -> audio/video/cfg/txt or any other files can be saved into this folder
    -> files can be accessed from "/static/<file-name>.<extension>"
        - create a file named 'sample.txt', add some text into it (for not being an empty file)
        - add it into 'static' folder
        - go to "127.0.0.1:8000/static/sample.txt" link, and it will open the file in the browser 

## adding 'templates' files
    -> create a folder 'templates' (yes, an 's' as the last character)
    -> project's functionality related folders generally stay into this folder
    -> files can be accessed with the API's 'end-points'
        - create a file named 'index.html' and add some html-writings
        - add it into 'templates' folder
        - import 'render_template' into the app.py file
        - from the "hello_world()" function return the template-file
            * return render_template("index.html")
        - now go to "127.0.0.1:8000/" link and see the output of the HTML file
