## Enable Virutal Environment
    -> go to 'project's' root folder
        * "cd 01_flask_to_do_cwh"
    -> install vicrutal Environment
        * "pip install virtualenv"
    -> create virtual Environment
        * "python3 -m venv virtualEnv"
    -> activate virtual Environment
        * "source virtualEnv/bin/activate"

## add .gitignore file
    -> add different files/folder
        * __pycache__
        * virtualEnv
        * .DS_Store

## Create requirements.txt file
    -> if install any module/library using 'pip install', insert it's name
        * sqlalchemy
        * flask





------------------------------------ tasks/steps --------------------------------------

## install flask 
    - add 'flask' in requirements.txt and save
    - write 'pip install -r requiremnts.txt' command, press enter
    - that's it!


## work with first 'minimal app'
    -> create a file named-> "app.py" in the root directory
    -> write code
        * from flask import Flask
        * app = Flask(__name__)
        * @app.route("/")
        * def hello_world():
        *   return "hello world"
    -> run app
        * if __name__ = "__main__":
        *   app.run(debug=True)
        - in the terminal write-> "python ./app.py"
        - open app into browser
            * 'press CTRL' and 'click' in the "127.0.0.1:5000" link
        - to change the 'port no.', change the line:
            * app.run(debug=True, port = 800)
            - press CTRL+C and agin run the app
            - app will run in the "127.0.0.1:8000" link

## adding second route:
    -> just add "@app.route(...)" 
        * "@app.route("/second-route")"
    -> and create function "def second_route():...."
        * def second_route():
        *   return "second page"
    -> 'save' and go to "127.0.0.1:8000/second-route", That's it!

## adding 'static' files
    -> create a folder 'static' in the project's root directory
    -> audio/video/cfg/txt or any other files can be saved into this folder
    -> files can be accessed from "/static/<file-name>.<extension>"
        - create a file named 'sample.txt', add some text into it (for not being an empty file)
        - add it into 'static' folder
        - go to "127.0.0.1:8000/static/sample.txt" link, and it will open the file in the browser 

## adding 'templates' files
    -> create a folder 'templates' (yes, an 's' as the last character)
    -> project's functionality related folders generally stay into this folder
    -> files can be accessed with the API's 'end-points'
        - create a file named 'index.html' and add some html-writings
        - add it into 'templates' folder
        - import 'render_template' into the app.py file
        - from the "hello_world()" function return the template-file
            * return render_template("index.html")
        - now go to "127.0.0.1:8000/" link and see the output of the HTML file

## Beautify the app from BOOTSTRAP:
    -> go to: https://getbootstrap.com/docs/4.4/getting-started/introduction/
    -> copy the 'starter code' and paste in the 'already cleared' index.html
    -> save the file and go to "127.0.0.1:8000" and can be seen the output "Hello World!"

    -> add 'navbar':
        - from 'components-> navbar' section copy the code
        - select the <h1> Hello World! </h1> and paste the code 
        - save and go to the default link, and see the output 
        - UPDATE: write "div.component" and press ENTER, and you will get: "<div class="components"></div> 
            - paste the 'navbar' section into this <div> section
    
    -> add 'login form':
        - from 'components->forms' copy  the 'login from' code
        - make a div.component section and paste the 'login form' code inside it
    
    -> add 'todo table':
        - from 'Content->Tables" section copy the table code
        - make a div.component section and paste the code inside it 


## Create DB 
    -> import 'flask-sqlalchemy' via requirements.txt
    -> setup the DB-> 
        * app.config['SQLALCHEMY_DATABASE_URI'] = "sqlite:///todo.db"
        * app.config['SQLALCHEMY_TRACK_MODIFICATIsONS'] = False
        * db = SQLAlchemy(app)
    -> Create DB model-class (data class)
        * class Todo(db.Model)
        - define all the columns
            * sl_no = db.Column(db.Integer, primary_key = True)
            * title = db.Column(db.String(200), nullable = False)
            * desc = db.Column(db.String(500), nullable = False)
            * date_created = db.Column(db.DateTime, default = datetime.utcnow)
        - write the '__repr__' function to printing our-wanted fields
            * def __repr__(self) -> str:
                #return print(f"{self.sl_no}- {self.title}")
                update: return f"{self.sl_no}- {self.title}"
    -> making the actual file 
        - start python-interpreter by writing 'python' in the terminal
        - write the fillowing:
            * from app import db
            * db.create_all()
        - the 'todo.db' file will be created into the project's root directory 


## Testing the DB
    -> create an object of Todo class and save it to DB
        - in the index() function write those lines
            * todo = Todo(title = "My first title", desc = "My first description")
            * db.session.add(todo)
            * db.session.commit()
        - reload the default rout ("/"), 
        - the 'title' and 'desc' will enter multiple times if you reload the page into the browser
    -> in the show() function print the whole DB
        - write those lines:
            * allTodo = Todo.query.all()
            * print(allTodo)
        - reload the "/show" route's page in the browser, item of the whole DB will be shown in the terminal


## Showing items into FRONT-END:
    -> install 'jinja2' extension for vsCode.
        - search "jinja2 snippet kit" and install it
    -> in the "table" section, modify the code like this:
        * <tbody>
            {% for todo in allTodo %}
                <tr>
                    <th scope="row">{{loop.index}} </th>
                    <td>{{todo.title}}</td>
                    <td>{{todo.desc}}</td>
                    <td>{{todo.date_created}}</td>
                </tr>
            {% endfor %}
          </tbody>

          -"jinja" will be use the code to generate all the table-rows for the DB 

